package co.base;
import java.io.File;
import java.io.IOException;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.support.ui.Select;

import io.github.bonigarcia.wdm.WebDriverManager;

public class Global {

	public static WebDriver driver;
	public static JavascriptExecutor javascriptExecutor;

	public void getDriver(String browserType) {

		switch (browserType) {
		case "Chrome":
			WebDriverManager.chromedriver().setup();
			driver = new ChromeDriver();

			break;

		case "Edge":
			WebDriverManager.edgedriver().setup();
			driver = new EdgeDriver();
			break;

		default:
			System.out.println("InValid_BrowserType");
			break;
		}

	}

	public void getUrl(String url) {
		driver.get(url);
	}

	public void sendKeysByJava(WebElement element, String keysToSend) {
		element.sendKeys(keysToSend);
	}

	public void sendKeysByJS(WebElement element, String keysToSend) {
		javascriptExecutor = (JavascriptExecutor) driver;
		javascriptExecutor.executeScript("arguments[0].setAttribute('value','" + keysToSend + "')", element);

	}

	public void clickByJS(WebElement element) {
		javascriptExecutor = (JavascriptExecutor) driver;
		javascriptExecutor.executeScript("arguments[0].click()", element);
	}

	public void scrollByJS(WebElement element, String scrollType) {
		
		javascriptExecutor = (JavascriptExecutor) driver;

		switch (scrollType) {
		case "Up":
			javascriptExecutor.executeScript("arguments[0].scrollIntoView(false)", element);
			break;

		case "Down":
			javascriptExecutor.executeScript("arguments[0].scrollIntoView(true)", element);
			break;

		default:
			System.out.println("InValid Scroll Type");
			break;
		}

	}

	public void clickByJava(WebElement element) {
		element.click();
	}

	public void screenShot(String name) throws IOException {
		// Type Casting
		TakesScreenshot takesScreenshot = (TakesScreenshot) driver;
		File sourceFile = takesScreenshot.getScreenshotAs(OutputType.FILE);
		File targteFile = new File(
				"C:\\Users\\hp\\eclipse-workspace\\NovemberEndFramework11.00AMBatch2024\\ErrorImages\\" + name
						+ ".png");
		FileUtils.copyFile(sourceFile, targteFile);

	}

	public void SelectByValue(WebElement element, String value) {

		Select select = new Select(element);
		select.selectByValue(value);

	}

	public void SelectByVisibleText(WebElement element, String value) {

		Select select = new Select(element);
		select.selectByVisibleText(value);

	}

	public void sleep(long millis) throws InterruptedException {
		Thread.sleep(millis);
	}

}
}
